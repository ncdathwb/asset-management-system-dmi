#!/usr/bin/env python3
"""
Test script ƒë·ªÉ ki·ªÉm tra soft delete tr√™n PostgreSQL
"""

from app import app
from models import Employee, db
from datetime import datetime

def test_soft_delete_functionality():
    """Test ch·ª©c nƒÉng soft delete"""
    try:
        with app.app_context():
            print("Testing soft delete functionality on PostgreSQL...")
            
            # 1. T·∫°o employee test
            test_employee = Employee(
                employee_code='TEST_SOFT_DELETE_001',
                name='Test Soft Delete Employee',
                department='IT',
                branch='vietnam',
                email='test_soft_delete_001@example.com',
                status='active'
            )
            
            db.session.add(test_employee)
            db.session.commit()
            
            employee_id = test_employee.id
            print(f"‚úÖ Created test employee with ID: {employee_id}")
            print(f"   - Name: {test_employee.name}")
            print(f"   - Status: {test_employee.status}")
            print(f"   - deleted_at: {test_employee.deleted_at}")
            
            # 2. Test soft delete
            print("\nPerforming soft delete...")
            test_employee.soft_delete()
            db.session.commit()
            
            # 3. Ki·ªÉm tra k·∫øt qu·∫£
            employee = Employee.query.get(employee_id)
            if employee:
                print(f"‚úÖ Employee still exists in database")
                print(f"   - Status: {employee.status}")
                print(f"   - deleted_at: {employee.deleted_at}")
                
                if employee.deleted_at is not None:
                    print("‚úÖ Soft delete working correctly!")
                    return True
                else:
                    print("‚ùå Soft delete not working - deleted_at is None")
                    return False
            else:
                print("‚ùå Employee not found after soft delete")
                return False
                
    except Exception as e:
        print(f"‚ùå Error during test: {e}")
        return False

def test_employee_queries():
    """Test c√°c query v·ªõi soft delete"""
    try:
        with app.app_context():
            print("\nTesting employee queries with soft delete...")
            
            # 1. Query t·∫•t c·∫£ employee (bao g·ªìm c·∫£ deleted)
            all_employees = Employee.query.all()
            print(f"Total employees (including deleted): {len(all_employees)}")
            
            # 2. Query ch·ªâ active employee (deleted_at IS NULL)
            active_employees = Employee.query.filter(Employee.deleted_at.is_(None)).all()
            print(f"Active employees (deleted_at IS NULL): {len(active_employees)}")
            
            # 3. Query deleted employee
            deleted_employees = Employee.query.filter(Employee.deleted_at.isnot(None)).all()
            print(f"Deleted employees (deleted_at IS NOT NULL): {len(deleted_employees)}")
            
            # 4. Test is_active() method
            active_count = 0
            for emp in all_employees:
                if emp.is_active():
                    active_count += 1
            
            print(f"Active employees (using is_active()): {active_count}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Error during query test: {e}")
        return False

def test_employee_creation():
    """Test t·∫°o employee m·ªõi"""
    try:
        with app.app_context():
            print("\nTesting employee creation...")
            
            # T·∫°o employee m·ªõi
            new_employee = Employee(
                employee_code='TEST_NEW_001',
                name='Test New Employee',
                department='HR',
                branch='vietnam',
                email='test_new_001@example.com',
                status='active'
            )
            
            db.session.add(new_employee)
            db.session.commit()
            
            print(f"‚úÖ Created new employee with ID: {new_employee.id}")
            print(f"   - deleted_at: {new_employee.deleted_at}")
            
            # Ki·ªÉm tra deleted_at m·∫∑c ƒë·ªãnh l√† None
            if new_employee.deleted_at is None:
                print("‚úÖ New employee has deleted_at = None (correct)")
                return True
            else:
                print("‚ùå New employee has deleted_at != None (incorrect)")
                return False
                
    except Exception as e:
        print(f"‚ùå Error during creation test: {e}")
        return False

def cleanup_test_data():
    """D·ªçn d·∫πp d·ªØ li·ªáu test"""
    try:
        with app.app_context():
            print("\nCleaning up test data...")
            
            # X√≥a c√°c employee test
            test_employees = Employee.query.filter(
                Employee.employee_code.like('TEST_%')
            ).all()
            
            for emp in test_employees:
                db.session.delete(emp)
            
            db.session.commit()
            print(f"‚úÖ Cleaned up {len(test_employees)} test employees")
            
    except Exception as e:
        print(f"‚ùå Error during cleanup: {e}")

if __name__ == "__main__":
    print("PostgreSQL Soft Delete Test")
    print("=" * 50)
    
    # Ch·∫°y c√°c test
    test1 = test_soft_delete_functionality()
    test2 = test_employee_queries()
    test3 = test_employee_creation()
    
    # D·ªçn d·∫πp
    cleanup_test_data()
    
    # K·∫øt qu·∫£
    print("\n" + "=" * 50)
    print("Test Results:")
    print(f"Soft delete functionality: {'‚úÖ PASS' if test1 else '‚ùå FAIL'}")
    print(f"Employee queries: {'‚úÖ PASS' if test2 else '‚ùå FAIL'}")
    print(f"Employee creation: {'‚úÖ PASS' if test3 else '‚ùå FAIL'}")
    
    if all([test1, test2, test3]):
        print("\nüéâ All tests passed! Soft delete is working correctly.")
    else:
        print("\n‚ö†Ô∏è Some tests failed. Please check the migration.")
    
    print("\nTest completed.") 