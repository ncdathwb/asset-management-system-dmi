#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script t·∫°o t√†i kho·∫£n tr·ª±c ti·∫øp tr√™n PostgreSQL database
S·ª≠ d·ª•ng cho vi·ªác t·∫°o t√†i kho·∫£n admin ƒë·∫ßu ti√™n tr√™n Render
"""

import os
import sys
from datetime import datetime
from werkzeug.security import generate_password_hash
import getpass

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import User

def create_initial_accounts():
    """T·∫°o 2 t√†i kho·∫£n admin ƒë·∫ßu ti√™n"""
    
    with app.app_context():
        # T·∫°o database tables n·∫øu ch∆∞a c√≥
        db.create_all()
        
        # Ki·ªÉm tra xem ƒë√£ c√≥ t√†i kho·∫£n n√†o ch∆∞a
        existing_users = User.query.count()
        if existing_users > 0:
            print(f"ƒê√£ c√≥ {existing_users} t√†i kho·∫£n trong database. B·ªè qua vi·ªác t·∫°o t√†i kho·∫£n m·ªõi.")
            return
        
        # T·∫°o t√†i kho·∫£n Super Admin
        super_admin = User(
            username='admin',
            password_hash=generate_password_hash('admin123'),
            email='admin@dmi.com',
            role='super_admin',
            branch='vietnam',
            created_at=datetime.now()
        )
        
        # T·∫°o t√†i kho·∫£n Branch Admin
        branch_admin = User(
            username='manager',
            password_hash=generate_password_hash('manager123'),
            email='manager@dmi.com',
            role='branch_admin',
            branch='japan',
            created_at=datetime.now()
        )
        
        # T·∫°o t√†i kho·∫£n Employee
        employee = User(
            username='employee',
            password_hash=generate_password_hash('employee123'),
            email='employee@dmi.com',
            role='employee',
            branch='vietnam',
            created_at=datetime.now()
        )
        
        try:
            # Th√™m v√†o database
            db.session.add(super_admin)
            db.session.add(branch_admin)
            db.session.add(employee)
            db.session.commit()
            
            print("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng!")
            print("\nüìã Th√¥ng tin ƒëƒÉng nh·∫≠p:")
            print("=" * 50)
            print("1. Super Admin (Vietnam):")
            print("   Username: admin")
            print("   Password: admin123")
            print("   Email: admin@dmi.com")
            print("   Role: Super Admin")
            print()
            print("2. Branch Admin (Japan):")
            print("   Username: manager")
            print("   Password: manager123")
            print("   Email: manager@dmi.com")
            print("   Role: Branch Admin")
            print()
            print("3. Employee (Vietnam):")
            print("   Username: employee")
            print("   Password: employee123")
            print("   Email: employee@dmi.com")
            print("   Role: Employee")
            print("=" * 50)
            print("\nüîó Truy c·∫≠p: https://asset-management-system-dmi.onrender.com")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå L·ªói khi t·∫°o t√†i kho·∫£n: {e}")

def list_accounts():
    """Li·ªát k√™ t·∫•t c·∫£ t√†i kho·∫£n trong PostgreSQL"""
    with app.app_context():
        users = User.query.all()
        if not users:
            print("Ch∆∞a c√≥ t√†i kho·∫£n n√†o trong database.")
            return
        print("\nüìã Danh s√°ch t√†i kho·∫£n:")
        print("=" * 50)
        for idx, user in enumerate(users, 1):
            print(f"{idx}. Username: {user.username}")
            print(f"   Email: {user.email}")
            print(f"   Role: {user.role}")
            print(f"   Branch: {user.branch}")
            print(f"   Created at: {user.created_at}")
            print("-" * 30)

def create_account_interactive():
    """T·∫°o t√†i kho·∫£n m·ªõi v·ªõi input t·ª´ ng∆∞·ªùi d√πng"""
    with app.app_context():
        username = input("Nh·∫≠p username: ").strip()
        password = getpass.getpass("Nh·∫≠p password: ").strip()
        email = input("Nh·∫≠p email: ").strip()
        role = input("Nh·∫≠p role (super_admin/branch_admin/employee): ").strip()
        branch = input("Nh·∫≠p branch (vietnam/japan): ").strip()
        
        if not username or not password or not email or not role or not branch:
            print("‚ùå T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu b·∫Øt bu·ªôc!")
            return
        
        # Ki·ªÉm tra username/email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if User.query.filter_by(username=username).first():
            print("‚ùå Username ƒë√£ t·ªìn t·∫°i!")
            return
        if User.query.filter_by(email=email).first():
            print("‚ùå Email ƒë√£ t·ªìn t·∫°i!")
            return
        
        user = User(
            username=username,
            password_hash=generate_password_hash(password),
            email=email,
            role=role,
            branch=branch,
            created_at=datetime.now()
        )
        try:
            db.session.add(user)
            db.session.commit()
            print(f"‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n: {username} ({role}) t·∫°i {branch}")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå L·ªói khi t·∫°o t√†i kho·∫£n: {e}")

def main():
    print("\n=== Qu·∫£n l√Ω t√†i kho·∫£n PostgreSQL ===")
    print("1. T·∫°o 3 t√†i kho·∫£n m·∫´u (admin, manager, employee)")
    print("2. Li·ªát k√™ t·∫•t c·∫£ t√†i kho·∫£n")
    print("3. T·∫°o t√†i kho·∫£n m·ªõi (nh·∫≠p th√¥ng tin)")
    print("0. Tho√°t")
    choice = input("Ch·ªçn ch·ª©c nƒÉng: ").strip()
    if choice == '1':
        create_initial_accounts()
    elif choice == '2':
        list_accounts()
    elif choice == '3':
        create_account_interactive()
    else:
        print("Tho√°t.")

if __name__ == "__main__":
    main() 