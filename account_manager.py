#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Account Manager - Qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng
H·ªó tr·ª£ t·∫°o v√† li·ªát k√™ t√†i kho·∫£n v·ªõi c√°c role kh√°c nhau
"""

import sqlite3
import hashlib
import os
import sys
from datetime import datetime
from typing import List, Dict, Optional
from werkzeug.security import generate_password_hash, check_password_hash

class AccountManager:
    def __init__(self, db_path: str = "instance/asset_management.db"):
        """Kh·ªüi t·∫°o AccountManager v·ªõi ƒë∆∞·ªùng d·∫´n database"""
        self.db_path = db_path
        self.roles = {
            'super_admin': 'Super Admin - Qu·∫£n tr·ªã vi√™n c·∫•p cao',
            'branch_admin': 'Branch Admin - Qu·∫£n tr·ªã vi√™n chi nh√°nh', 
            'employee': 'Employee - Nh√¢n vi√™n'
        }
        self.branches = ['vietnam', 'japan']

    def get_db_connection(self):
        """T·∫°o k·∫øt n·ªëi database"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            return conn
        except Exception as e:
            print(f"L·ªói k·∫øt n·ªëi database: {e}")
            return None

    def hash_password(self, password: str) -> str:
        """M√£ h√≥a m·∫≠t kh·∫©u s·ª≠ d·ª•ng werkzeug.security"""
        return generate_password_hash(password)

    def format_datetime(self, datetime_str: str) -> str:
        """Format datetime string to remove seconds"""
        try:
            dt = datetime.strptime(datetime_str, '%Y-%m-%d %H:%M:%S')
            return dt.strftime('%Y-%m-%d %H:%M')
        except:
            return datetime_str

    def list_accounts(self) -> List[Dict]:
        """Li·ªát k√™ t·∫•t c·∫£ t√†i kho·∫£n ƒëƒÉng nh·∫≠p"""
        conn = self.get_db_connection()
        if not conn:
            return []

        try:
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, username, password_hash, email, role, branch, created_at 
                FROM user 
                ORDER BY branch, created_at DESC
            """)
            
            accounts = []
            for row in cursor.fetchall():
                accounts.append({
                    'id': row['id'],
                    'username': row['username'],
                    'password_hash': row['password_hash'],  # Ch·ªâ s·ª≠ d·ª•ng password_hash
                    'email': row['email'],
                    'role': row['role'],
                    'branch': row['branch'],
                    'created_at': self.format_datetime(row['created_at']),
                    'role_display': self.roles.get(row['role'], row['role'])
                })
            
            return accounts
            
        except Exception as e:
            print(f"L·ªói khi li·ªát k√™ t√†i kho·∫£n: {e}")
            return []
        finally:
            conn.close()

    def create_account(self, username: str, password: str, email: str, role: str, branch: str) -> Dict:
        """T·∫°o t√†i kho·∫£n m·ªõi"""
        # Validate input
        if not username or not password or not email or not role or not branch:
            return {'success': False, 'message': 'T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu b·∫Øt bu·ªôc'}

        if role not in self.roles:
            return {'success': False, 'message': f'Role kh√¥ng h·ª£p l·ªá. C√°c role c√≥ s·∫µn: {", ".join(self.roles.keys())}'}

        if branch not in self.branches:
            return {'success': False, 'message': f'Chi nh√°nh kh√¥ng h·ª£p l·ªá. C√°c chi nh√°nh c√≥ s·∫µn: {", ".join(self.branches)}'}

        conn = self.get_db_connection()
        if not conn:
            return {'success': False, 'message': 'Kh√¥ng th·ªÉ k·∫øt n·ªëi database'}

        try:
            cursor = conn.cursor()
            
            # Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
            cursor.execute("SELECT id FROM user WHERE username = ?", (username,))
            if cursor.fetchone():
                return {'success': False, 'message': 'Username ƒë√£ t·ªìn t·∫°i'}

            # Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
            cursor.execute("SELECT id FROM user WHERE email = ?", (email,))
            if cursor.fetchone():
                return {'success': False, 'message': 'Email ƒë√£ t·ªìn t·∫°i'}

            # T·∫°o t√†i kho·∫£n m·ªõi
            hashed_password = self.hash_password(password)
            created_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            cursor.execute("""
                INSERT INTO user (username, password_hash, email, role, branch, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (username, hashed_password, email, role, branch, created_at))
            
            conn.commit()
            
            return {
                'success': True, 
                'message': f'T·∫°o t√†i kho·∫£n th√†nh c√¥ng: {username} ({self.roles[role]}) t·∫°i {branch}',
                'account_id': cursor.lastrowid
            }
            
        except Exception as e:
            conn.rollback()
            return {'success': False, 'message': f'L·ªói khi t·∫°o t√†i kho·∫£n: {e}'}
        finally:
            conn.close()

    def delete_account(self, account_id: int) -> Dict:
        """X√≥a t√†i kho·∫£n theo ID"""
        conn = self.get_db_connection()
        if not conn:
            return {'success': False, 'message': 'Kh√¥ng th·ªÉ k·∫øt n·ªëi database'}

        try:
            cursor = conn.cursor()
            
            # Ki·ªÉm tra t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng
            cursor.execute("SELECT username, role FROM user WHERE id = ?", (account_id,))
            account = cursor.fetchone()
            if not account:
                return {'success': False, 'message': 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i'}

            # X√≥a t√†i kho·∫£n
            cursor.execute("DELETE FROM user WHERE id = ?", (account_id,))
            conn.commit()
            
            return {
                'success': True, 
                'message': f'ƒê√£ x√≥a t√†i kho·∫£n: {account["username"]} ({account["role"]})'
            }
            
        except Exception as e:
            conn.rollback()
            return {'success': False, 'message': f'L·ªói khi x√≥a t√†i kho·∫£n: {e}'}
        finally:
            conn.close()

    def change_password(self, account_id: int, new_password: str) -> Dict:
        """ƒê·ªïi m·∫≠t kh·∫©u t√†i kho·∫£n"""
        if not new_password:
            return {'success': False, 'message': 'M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}

        conn = self.get_db_connection()
        if not conn:
            return {'success': False, 'message': 'Kh√¥ng th·ªÉ k·∫øt n·ªëi database'}

        try:
            cursor = conn.cursor()
            
            # Ki·ªÉm tra t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng
            cursor.execute("SELECT username FROM user WHERE id = ?", (account_id,))
            account = cursor.fetchone()
            if not account:
                return {'success': False, 'message': 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i'}

            # C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
            hashed_password = self.hash_password(new_password)
            cursor.execute("UPDATE user SET password_hash = ? WHERE id = ?", (hashed_password, account_id))
            conn.commit()
            
            return {
                'success': True, 
                'message': f'ƒê√£ ƒë·ªïi m·∫≠t kh·∫©u cho t√†i kho·∫£n: {account["username"]}'
            }
            
        except Exception as e:
            conn.rollback()
            return {'success': False, 'message': f'L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: {e}'}
        finally:
            conn.close()

def print_menu():
    """In menu ch√≠nh"""
    print("\n" + "="*50)
    print("QU·∫¢N L√ù T√ÄI KHO·∫¢N - ACCOUNT MANAGER")
    print("="*50)
    print("1. Li·ªát k√™ t·∫•t c·∫£ t√†i kho·∫£n ƒëƒÉng nh·∫≠p")
    print("2. T·∫°o t√†i kho·∫£n m·ªõi")
    print("3. X√≥a t√†i kho·∫£n")
    print("4. ƒê·ªïi m·∫≠t kh·∫©u")
    print("5. Tho√°t")
    print("="*50)

def get_user_input(prompt: str, required: bool = True) -> str:
    """L·∫•y input t·ª´ ng∆∞·ªùi d√πng"""
    while True:
        value = input(prompt).strip()
        if not required or value:
            return value
        print("Tr∆∞·ªùng n√†y l√† b·∫Øt bu·ªôc!")

def show_role_menu(roles: Dict) -> str:
    """Hi·ªÉn th·ªã menu ch·ªçn role"""
    print("\nüìã C√°c role c√≥ s·∫µn:")
    role_list = list(roles.keys())
    for i, role in enumerate(role_list, 1):
        print(f"  {i}. {role}: {roles[role]}")
    
    while True:
        choice = input(f"Ch·ªçn role (1-{len(role_list)}): ").strip()
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(role_list):
                return role_list[choice_num - 1]
        print(f"‚ùå Vui l√≤ng ch·ªçn t·ª´ 1-{len(role_list)}")

def show_branch_menu(branches: List) -> str:
    """Hi·ªÉn th·ªã menu ch·ªçn branch"""
    print(f"\nüè¢ C√°c chi nh√°nh c√≥ s·∫µn:")
    for i, branch in enumerate(branches, 1):
        print(f"  {i}. {branch}")
    
    while True:
        choice = input(f"Ch·ªçn chi nh√°nh (1-{len(branches)}): ").strip()
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(branches):
                return branches[choice_num - 1]
        print(f"‚ùå Vui l√≤ng ch·ªçn t·ª´ 1-{len(branches)}")

def main():
    """H√†m ch√≠nh"""
    manager = AccountManager()
    
    while True:
        print_menu()
        choice = get_user_input("Ch·ªçn ch·ª©c nƒÉng (1-5): ")
        
        if choice == '1':
            # Li·ªát k√™ t·∫•t c·∫£ t√†i kho·∫£n ƒëƒÉng nh·∫≠p
            accounts = manager.list_accounts()
            if accounts:
                # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt t·ª´ng t√†i kho·∫£n
                print(f"\nüîç CHI TI·∫æT T·ª™NG T√ÄI KHO·∫¢N ƒêƒÇNG NH·∫¨P:")
                print("=" * 100)
                for acc in accounts:
                    print(f"\nüìå T√ÄI KHO·∫¢N ID: {acc['id']}")
                    print(f"   üë§ Username: {acc['username']}")
                    print(f"   üìß Email: {acc['email']}")
                    print(f"   üîê Password Hash: {acc['password_hash'][:50]}...")  # Ch·ªâ hi·ªÉn th·ªã 50 k√Ω t·ª± ƒë·∫ßu
                    print(f"   üë®‚Äçüíº Role: {acc['role_display']}")
                    print(f"   üè¢ Branch: {acc['branch']}")
                    print(f"   üìÖ Created: {acc['created_at']}")
                    print("-" * 100)
            else:
                print("‚ùå Kh√¥ng c√≥ t√†i kho·∫£n ƒëƒÉng nh·∫≠p n√†o.")
                
        elif choice == '2':
            # T·∫°o t√†i kho·∫£n m·ªõi
            print("\n‚ûï T·∫†O T√ÄI KHO·∫¢N M·ªöI")
            print("=" * 30)
            
            username = get_user_input("üë§ Username: ")
            password = get_user_input("üîë Password: ")
            email = get_user_input("üìß Email: ")
            
            role = show_role_menu(manager.roles)
            branch = show_branch_menu(manager.branches)
            
            result = manager.create_account(username, password, email, role, branch)
            print(f"\n‚úÖ K·∫øt qu·∫£: {result['message']}")
            
        elif choice == '3':
            # X√≥a t√†i kho·∫£n
            print("\nüóëÔ∏è X√ìA T√ÄI KHO·∫¢N")
            print("=" * 20)
            
            # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n
            accounts = manager.list_accounts()
            if accounts:
                print("üìã Danh s√°ch t√†i kho·∫£n ƒëƒÉng nh·∫≠p:")
                print("-" * 80)
                print(f"{'ID':<5} {'Username':<20} {'Role':<20} {'Branch':<12} {'Created':<16}")
                print("-" * 80)
                for acc in accounts:
                    print(f"{acc['id']:<5} {acc['username']:<20} {acc['role_display']:<20} {acc['branch']:<12} {acc['created_at']:<16}")
                
                account_id = get_user_input("\nNh·∫≠p ID t√†i kho·∫£n c·∫ßn x√≥a: ")
                if account_id.isdigit():
                    confirm = get_user_input("‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a? (y/N): ", required=False)
                    if confirm.lower() == 'y':
                        result = manager.delete_account(int(account_id))
                        print(f"‚úÖ K·∫øt qu·∫£: {result['message']}")
                    else:
                        print("‚ùå ƒê√£ h·ªßy x√≥a t√†i kho·∫£n.")
                else:
                    print("‚ùå ID kh√¥ng h·ª£p l·ªá!")
            else:
                print("‚ùå Kh√¥ng c√≥ t√†i kho·∫£n ƒëƒÉng nh·∫≠p n√†o ƒë·ªÉ x√≥a.")
                
        elif choice == '4':
            # ƒê·ªïi m·∫≠t kh·∫©u
            print("\nüîê ƒê·ªîI M·∫¨T KH·∫®U")
            print("=" * 20)
            
            # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n
            accounts = manager.list_accounts()
            if accounts:
                print("üìã Danh s√°ch t√†i kho·∫£n ƒëƒÉng nh·∫≠p:")
                print("-" * 80)
                print(f"{'ID':<5} {'Username':<20} {'Role':<20} {'Branch':<12} {'Created':<16}")
                print("-" * 80)
                for acc in accounts:
                    print(f"{acc['id']:<5} {acc['username']:<20} {acc['role_display']:<20} {acc['branch']:<12} {acc['created_at']:<16}")
                
                account_id = get_user_input("\nNh·∫≠p ID t√†i kho·∫£n c·∫ßn ƒë·ªïi m·∫≠t kh·∫©u: ")
                if account_id.isdigit():
                    new_password = get_user_input("üîë M·∫≠t kh·∫©u m·ªõi: ")
                    result = manager.change_password(int(account_id), new_password)
                    print(f"‚úÖ K·∫øt qu·∫£: {result['message']}")
                else:
                    print("‚ùå ID kh√¥ng h·ª£p l·ªá!")
            else:
                print("‚ùå Kh√¥ng c√≥ t√†i kho·∫£n ƒëƒÉng nh·∫≠p n√†o.")
                
        elif choice == '5':
            print("üëã T·∫°m bi·ªát!")
            break
            
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 1-5.")

if __name__ == "__main__":
    main() 