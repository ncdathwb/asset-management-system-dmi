#!/usr/bin/env python3
"""
Script ƒë∆°n gi·∫£n ƒë·ªÉ x√≥a nhanh assignment history
"""

import os
import sys

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import AssetAssignment

def clear_returned_assignments():
    """X√≥a ch·ªâ c√°c assignment ƒë√£ thu h·ªìi"""
    with app.app_context():
        print("=== X√ìA ASSIGNMENTS ƒê√É THU H·ªíI ===")
        
        # ƒê·∫øm s·ªë l∆∞·ª£ng
        total_before = AssetAssignment.query.count()
        returned_count = AssetAssignment.query.filter_by(status='returned').count()
        active_count = AssetAssignment.query.filter_by(status='assigned').count()
        
        print(f"T·ªïng s·ªë assignments: {total_before}")
        print(f"Returned assignments: {returned_count}")
        print(f"Active assignments: {active_count}")
        
        if returned_count == 0:
            print("‚úÖ Kh√¥ng c√≥ returned assignment n√†o ƒë·ªÉ x√≥a.")
            return
        
        print(f"\nüóëÔ∏è  X√≥a {returned_count} returned assignments...")
        
        try:
            # X√≥a ch·ªâ returned assignments
            deleted_count = AssetAssignment.query.filter_by(status='returned').delete()
            db.session.commit()
            
            print(f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng {deleted_count} returned assignment records!")
            
            # Ki·ªÉm tra sau khi x√≥a
            total_after = AssetAssignment.query.count()
            active_after = AssetAssignment.query.filter_by(status='assigned').count()
            
            print(f"Sau khi x√≥a:")
            print(f"  T·ªïng s·ªë: {total_after}")
            print(f"  Active: {active_after}")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå L·ªói khi x√≥a: {e}")

def clear_all_assignments():
    """X√≥a to√†n b·ªô assignment history"""
    with app.app_context():
        print("=== X√ìA TO√ÄN B·ªò ASSIGNMENT HISTORY ===")
        
        # ƒê·∫øm s·ªë l∆∞·ª£ng
        total_before = AssetAssignment.query.count()
        active_count = AssetAssignment.query.filter_by(status='assigned').count()
        
        print(f"T·ªïng s·ªë assignments: {total_before}")
        print(f"Active assignments: {active_count}")
        
        if active_count > 0:
            print(f"‚ö†Ô∏è  C·∫¢NH B√ÅO: C√≥ {active_count} assignment ƒëang active!")
            print("   Vi·ªác x√≥a s·∫Ω l√†m m·∫•t th√¥ng tin v·ªÅ t√†i s·∫£n ƒëang ƒë∆∞·ª£c c·∫•p ph√°t.")
        
        print(f"\nüóëÔ∏è  X√≥a to√†n b·ªô {total_before} assignments...")
        
        try:
            # X√≥a to√†n b·ªô assignment history
            deleted_count = AssetAssignment.query.delete()
            db.session.commit()
            
            print(f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng {deleted_count} assignment records!")
            
            # Ki·ªÉm tra sau khi x√≥a
            total_after = AssetAssignment.query.count()
            print(f"Sau khi x√≥a: {total_after} records")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå L·ªói khi x√≥a: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        action = sys.argv[1].lower()
        
        if action == "returned":
            clear_returned_assignments()
        elif action == "all":
            clear_all_assignments()
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            print("S·ª≠ d·ª•ng: python quick_clear_history.py [returned|all]")
    else:
        print("=== X√ìA ASSIGNMENT HISTORY ===")
        print("S·ª≠ d·ª•ng:")
        print("  python quick_clear_history.py returned  - X√≥a ch·ªâ assignments ƒë√£ thu h·ªìi")
        print("  python quick_clear_history.py all       - X√≥a to√†n b·ªô assignment history") 