#!/usr/bin/env python3
"""
Script ƒë·ªÉ t·∫°o b·∫£ng asset_log tr√™n PostgreSQL
"""
import psycopg2
import os
from datetime import datetime

def create_asset_log_table_postgresql():
    """T·∫°o b·∫£ng asset_log trong PostgreSQL database"""
    # S·ª≠ d·ª•ng DATABASE_URL c·ª• th·ªÉ
    database_url = "postgresql://asset_management_system_dmi_database_user:KATbnx7sI9a7Liv6YypmKguAMquqfdfB@dpg-d1eg11ili9vc73a13abg-a.singapore-postgres.render.com/asset_management_system_dmi_database"
    
    try:
        print("üîó Connecting to PostgreSQL database...")
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Ki·ªÉm tra xem b·∫£ng ƒë√£ t·ªìn t·∫°i ch∆∞a
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'asset_log'
            );
        """)
        table_exists = cursor.fetchone()[0]
        
        if table_exists:
            print("‚úÖ B·∫£ng asset_log ƒë√£ t·ªìn t·∫°i!")
            return True
        
        # T·∫°o b·∫£ng asset_log
        create_table_sql = """
        CREATE TABLE asset_log (
            id SERIAL PRIMARY KEY,
            asset_id INTEGER NOT NULL,
            employee_id INTEGER NOT NULL,
            action VARCHAR(20) NOT NULL,
            date TIMESTAMP NOT NULL,
            notes VARCHAR(255),
            reason VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
        
        cursor.execute(create_table_sql)
        conn.commit()
        
        print("‚úÖ B·∫£ng asset_log ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
        
        # T·∫°o index ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t truy v·∫•n
        cursor.execute("CREATE INDEX idx_asset_log_asset_id ON asset_log(asset_id);")
        cursor.execute("CREATE INDEX idx_asset_log_employee_id ON asset_log(employee_id);")
        cursor.execute("CREATE INDEX idx_asset_log_action ON asset_log(action);")
        cursor.execute("CREATE INDEX idx_asset_log_date ON asset_log(date);")
        
        conn.commit()
        print("‚úÖ C√°c index ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o b·∫£ng: {e}")
        if 'conn' in locals():
            conn.rollback()
        return False
    finally:
        if 'conn' in locals():
            conn.close()

def test_asset_log_postgresql():
    """Test vi·ªác ghi v√† ƒë·ªçc log t·ª´ b·∫£ng asset_log tr√™n PostgreSQL"""
    # S·ª≠ d·ª•ng DATABASE_URL c·ª• th·ªÉ
    database_url = "postgresql://asset_management_system_dmi_database_user:KATbnx7sI9a7Liv6YypmKguAMquqfdfB@dpg-d1eg11ili9vc73a13abg-a.singapore-postgres.render.com/asset_management_system_dmi_database"
    
    try:
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns
            WHERE table_name = 'asset_log'
            ORDER BY ordinal_position;
        """)
        columns = cursor.fetchall()
        print("üìã C·∫•u tr√∫c b·∫£ng asset_log:")
        for col in columns:
            print(f"  {col[0]} {col[1]} {'NULL' if col[2] == 'YES' else 'NOT NULL'}")
        
        # ƒê·∫øm s·ªë b·∫£n ghi hi·ªán t·∫°i
        cursor.execute("SELECT COUNT(*) FROM asset_log;")
        count = cursor.fetchone()[0]
        print(f"\nüìä S·ªë b·∫£n ghi hi·ªán t·∫°i: {count}")
        
        # Hi·ªÉn th·ªã 5 b·∫£n ghi g·∫ßn nh·∫•t
        cursor.execute("""
            SELECT id, asset_id, employee_id, action, date, notes, reason 
            FROM asset_log 
            ORDER BY date DESC 
            LIMIT 5;
        """)
        recent_logs = cursor.fetchall()
        
        if recent_logs:
            print("\nüìù 5 b·∫£n ghi g·∫ßn nh·∫•t:")
            for log in recent_logs:
                print(f"  ID: {log[0]}, Asset: {log[1]}, Employee: {log[2]}, Action: {log[3]}, Date: {log[4]}, Notes: {log[5]}, Reason: {log[6]}")
        else:
            print("\nüìù Ch∆∞a c√≥ b·∫£n ghi n√†o trong b·∫£ng.")
        
        # Test th√™m m·ªôt b·∫£n ghi m·ªõi
        test_log = {
            'asset_id': 1,
            'employee_id': 1,
            'action': 'assigned',
            'date': datetime.now(),
            'notes': 'Test log entry PostgreSQL',
            'reason': None
        }
        
        cursor.execute("""
            INSERT INTO asset_log (asset_id, employee_id, action, date, notes, reason)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (test_log['asset_id'], test_log['employee_id'], test_log['action'], 
              test_log['date'], test_log['notes'], test_log['reason']))
        
        conn.commit()
        print(f"\n‚úÖ ƒê√£ th√™m b·∫£n ghi test th√†nh c√¥ng!")
        
        # Ki·ªÉm tra l·∫°i s·ªë b·∫£n ghi
        cursor.execute("SELECT COUNT(*) FROM asset_log;")
        new_count = cursor.fetchone()[0]
        print(f"üìä S·ªë b·∫£n ghi sau khi th√™m: {new_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        if 'conn' in locals():
            conn.rollback()
        return False
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    print("üöÄ POSTGRESQL ASSET LOG SETUP")
    print("=" * 50)
    
    # T·∫°o b·∫£ng
    success = create_asset_log_table_postgresql()
    if success:
        print("\nüß™ Testing b·∫£ng asset_log...")
        test_success = test_asset_log_postgresql()
        if test_success:
            print("\n‚úÖ Ho√†n th√†nh! B·∫£ng asset_log ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng.")
        else:
            print("\n‚ùå Test th·∫•t b·∫°i!")
    else:
        print("\n‚ùå Kh√¥ng th·ªÉ t·∫°o b·∫£ng asset_log!") 