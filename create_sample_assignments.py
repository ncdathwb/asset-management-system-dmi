#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script t·∫°o d·ªØ li·ªáu m·∫´u cho assignment history
"""

import os
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv
from pytz import timezone
load_dotenv()

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import AssetAssignment, Asset, Employee, User

def create_sample_assignments():
    """T·∫°o d·ªØ li·ªáu m·∫´u cho assignment history"""
    
    with app.app_context():
        print("üîß T·∫†O D·ªÆ LI·ªÜU M·∫™U CHO ASSIGNMENT HISTORY")
        print("=" * 60)
        
        # Ki·ªÉm tra xem c√≥ asset v√† employee n√†o kh√¥ng
        assets = Asset.query.filter_by(branch='vietnam').all()
        employees = Employee.query.filter_by(branch='vietnam', status='active').all()
        
        if not assets:
            print("‚ùå Kh√¥ng c√≥ asset n√†o trong branch vietnam!")
            return
            
        if not employees:
            print("‚ùå Kh√¥ng c√≥ employee n√†o trong branch vietnam!")
            return
            
        print(f"üì¶ T√¨m th·∫•y {len(assets)} assets")
        print(f"üë• T√¨m th·∫•y {len(employees)} employees")
        
        # T·∫°o m·ªôt s·ªë b·∫£n ghi assignment m·∫´u
        sample_assignments = []
        
        # 1. T·∫°o b·∫£n ghi assigned (ƒëang c·∫•p ph√°t)
        for i in range(min(3, len(assets), len(employees))):
            asset = assets[i]
            employee = employees[i]
            
            # T·∫°o b·∫£n ghi assigned
            assigned_assignment = AssetAssignment(
                asset_id=asset.id,
                employee_id=employee.id,
                assigned_date=datetime.now(timezone('Asia/Ho_Chi_Minh')) - timedelta(days=i+1),
                status='assigned',
                notes=f'C·∫•p ph√°t m·∫´u #{i+1}',
                created_at=datetime.now(timezone('Asia/Ho_Chi_Minh')) - timedelta(days=i+1),
                updated_at=datetime.now(timezone('Asia/Ho_Chi_Minh')) - timedelta(days=i+1)
            )
            sample_assignments.append(assigned_assignment)
            
            # C·∫≠p nh·∫≠t asset status
            asset.status = 'In Use'
            asset.available_quantity = max(0, asset.available_quantity - 1)
        
        # 2. T·∫°o m·ªôt s·ªë b·∫£n ghi returned (ƒë√£ tr·∫£ l·∫°i)
        for i in range(min(2, len(assets), len(employees))):
            if i + 3 < len(assets) and i + 3 < len(employees):
                asset = assets[i + 3]
                employee = employees[i + 3]
                
                # T·∫°o b·∫£n ghi returned
                returned_assignment = AssetAssignment(
                    asset_id=asset.id,
                    employee_id=employee.id,
                    assigned_date=datetime.now(timezone('Asia/Ho_Chi_Minh')) - timedelta(days=i+5),
                    return_date=datetime.now(timezone('Asia/Ho_Chi_Minh')) - timedelta(days=i+1),
                    status='returned',
                    notes=f'C·∫•p ph√°t m·∫´u #{i+4}',
                    reclaim_reason='Not in use / Idle',
                    reclaim_notes=f'Tr·∫£ l·∫°i m·∫´u #{i+1}',
                    created_at=datetime.now(timezone('Asia/Ho_Chi_Minh')) - timedelta(days=i+5),
                    updated_at=datetime.now(timezone('Asia/Ho_Chi_Minh')) - timedelta(days=i+1)
                )
                sample_assignments.append(returned_assignment)
                
                # C·∫≠p nh·∫≠t asset status
                asset.status = 'Available'
                asset.available_quantity += 1
        
        try:
            # Th√™m t·∫•t c·∫£ v√†o database
            for assignment in sample_assignments:
                db.session.add(assignment)
            
            db.session.commit()
            
            print(f"‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng {len(sample_assignments)} b·∫£n ghi assignment m·∫´u!")
            print("\nüìã CHI TI·∫æT C√ÅC B·∫¢N GHI ƒê√É T·∫†O:")
            print("-" * 50)
            
            for i, assignment in enumerate(sample_assignments, 1):
                asset = Asset.query.get(assignment.asset_id)
                employee = Employee.query.get(assignment.employee_id)
                print(f"\nüîπ B·∫¢N GHI #{i}")
                print(f"   Status: {assignment.status}")
                print(f"   Asset: {asset.name} ({asset.asset_code})")
                print(f"   Employee: {employee.name} ({employee.employee_code})")
                print(f"   Assigned Date: {assignment.assigned_date}")
                print(f"   Return Date: {assignment.return_date}")
                print(f"   Notes: {assignment.notes}")
                if assignment.status == 'returned':
                    print(f"   Reclaim Reason: {assignment.reclaim_reason}")
                    print(f"   Reclaim Notes: {assignment.reclaim_notes}")
            
            # Ki·ªÉm tra l·∫°i t·ªïng s·ªë
            total_assignments = AssetAssignment.query.count()
            assigned_count = AssetAssignment.query.filter_by(status='assigned').count()
            returned_count = AssetAssignment.query.filter_by(status='returned').count()
            
            print(f"\nüìä TH·ªêNG K√ä SAU KHI T·∫†O:")
            print(f"   T·ªïng s·ªë b·∫£n ghi: {total_assignments}")
            print(f"   Status 'assigned': {assigned_count}")
            print(f"   Status 'returned': {returned_count}")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu m·∫´u: {e}")

if __name__ == "__main__":
    create_sample_assignments() 